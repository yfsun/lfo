// Generated by CoffeeScript 1.6.1
(function() {

  window.Game = (function() {

    function Game() {
      this.Y_AXIS_THREASHOLD = 30;
    }

    Game.prototype.init = function() {
      this.keysDown = {};
      this.players = [];
      this.stageInit();
      this.serverInit();
      createjs.Ticker.setFPS(60);
      createjs.Ticker.addEventListener("tick", this.stage);
      this.ready = false;
      this.lastKeyPress = new Date();
      return this.addEventHandlers();
    };

    Game.prototype.serverInit = function() {
      this.socket = io.connect("http://192.168.1.129", {
        port: 8000,
        transports: ["websocket"]
      });
      return console.log(this.socket);
    };

    Game.prototype.stageInit = function() {
      var background, shape;
      this.rect = new createjs.Rectangle(0, 0, 100, 100);
      this.stage = new createjs.Stage(document.getElementById("gameCanvas"));
      background = new createjs.Graphics().beginFill("#000000").drawRect(0, 0, this.stage.canvas.width, this.stage.canvas.height);
      shape = new createjs.Shape(background);
      shape.x = 0;
      shape.y = 0;
      this.stage.addChild(shape);
      this.hud = new Hud(this.players, this.stage.canvas.width, 100, this.stage);
      this.arena = new Arena(this.stage.canvas.width, this.stage.canvas.height - 100, this.players);
      this.arena.setPosition(0, 100);
      return this.arena.addToStage(this.stage);
    };

    Game.prototype.addEventHandlers = function() {
      this.socket.on("connect", this.onConnected.bind(this));
      this.socket.on("new player", this.onNewPlayer.bind(this));
      this.socket.on("client id", this.onReceivedClientID.bind(this));
      return this.socket.on("update", this.onUpdate.bind(this));
    };

    Game.prototype.onUpdate = function(data) {
      var updatePlayer;
      if (data.id !== this.clientID) {
        console.log('update');
        updatePlayer = this.playerGet(data.id);
        updatePlayer.x = data.x;
        updatePlayer.y = data.y;
        return updatePlayer.run(data.dir);
      }
    };

    Game.prototype.onConnected = function() {};

    Game.prototype.onReceivedClientID = function(data) {
      this.socket.emit("new player", {
        id: data.id,
        x: 250,
        y: 250
      });
      return this.clientID = data.id;
    };

    Game.prototype.onNewPlayer = function(data) {
      var c;
      if (!(this.playerExists(data.id))) {
        console.log('Add new player to stage ' + data.id);
        c = new Character("firzen", "assets/spritesheets/firzen.png", 5, data.x, data.y);
        c.id = data.id;
        this.arena.addPlayer(c);
        this.players.push(c);
      }
      console.log('player list');
      console.log(this.players);
      console.log('New Player');
      console.log(data);
      if (data.id === this.clientID) {
        console.log('My Character');
        createjs.Ticker.addEventListener("tick", (function(evt) {
          if (this.keysDown[Constant.KEYCODE_RIGHT]) {
            c.run('right');
            this.socket.emit("update", {
              id: this.clientID,
              x: c.x,
              y: c.y,
              dir: "right"
            });
            console.log("new Coord" + this.playerGet(this.clientID).x + "," + c.y);
          }
          if (this.keysDown[Constant.KEYCODE_LEFT]) {
            c.run('left');
            this.socket.emit("update", {
              id: this.clientID,
              x: c.x,
              y: c.y,
              dir: "left"
            });
          }
          if (this.keysDown[Constant.KEYCODE_DOWN]) {
            this.socket.emit("update", {
              id: this.clientID,
              x: c.x,
              y: c.y,
              dir: "down"
            });
            c.run('down');
          }
          if (this.keysDown[Constant.KEYCODE_UP]) {
            this.socket.emit("update", {
              id: this.clientID,
              x: c.x,
              y: c.y,
              dir: "up"
            });
            c.run('up');
            console.log("new Coord" + this.playerGet(this.clientID).x + "," + c.y);
          }
          if (this.keysDown[Constant.KEYCODE_Z]) {
            c.attack();
            if (collide(this.enemy.getRect(), c.getRect())) {
              this.enemy.gotHit();
              return this.enemy.setState("hurt");
            }
          }
        }).bind(this));
        window.addEventListener("keydown", (function(e) {
          return this.keysDown[e.keyCode] = true;
        }).bind(this));
        return window.addEventListener("keyup", (function(e) {
          this.keysDown[e.keyCode] = false;
          if (!this.keysDown[Constant.KEYCODE_RIGHT] && !this.keysDown[Constant.KEYCODE_LEFT] && !this.keysDown[Constant.KEYCODE_UP] && !this.keysDown[Constant.KEYCODE_DOWN]) {
            if (c.character.currentAnimation === "run") {
              c.idle();
            }
            return c.setState('idle');
          }
        }).bind(this));
      } else {

      }
    };

    Game.prototype.playerExists = function(id) {
      var p, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        if (p.id === id) {
          return true;
        }
      }
      return false;
    };

    Game.prototype.playerGet = function(id) {
      var p, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        if (p.id === id) {
          return p;
        }
      }
    };

    Game.prototype.collide = function(rect1, rect2) {
      console.log('rect1 ' + rect1.y2);
      console.log('rect2 ' + rect2.y2);
      console.log(!(rect2.x2 < rect1.x1) && !(rect2.x1 > rect1.x2));
      console.log(rect1.y2 - this.Y_AXIS_THREASHOLD);
      console.log(rect1.y2 + this.Y_AXIS_THREASHOLD);
      return !(rect2.x2 < rect1.x1) && !(rect2.x1 > rect1.x2) && (rect2.y2 > (rect1.y2 - this.Y_AXIS_THREASHOLD)) && (rect2.y2 < (rect1.y2 + this.Y_AXIS_THREASHOLD));
    };

    return Game;

  })();

}).call(this);
